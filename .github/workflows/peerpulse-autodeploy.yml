name: Trigger auto deployment for peerpulse

# When this action will be executed
on:
  # Automatically trigger it when detected changes in repo
  push:
    branches: [main]
    paths:
      - "**"
      - ".github/workflows/peerpulse-autodeploy.yml"

  # Allow manual trigger
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PEERPULSE_AZURE_CREDENTIALS }}

      - name: Build and push container image to registry
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}
          registryUrl: ${{ secrets.PEERPULSE_CONTAINER_REGISTRY }}.azurecr.io
          registryUsername: ${{ secrets.PEERPULSE_REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.PEERPULSE_REGISTRY_PASSWORD }}
          containerAppName: ${{ secrets.PEERPULSE_CONTAINER_APP_NAME }}
          resourceGroup: ${{ secrets.PEERPULSE_RESOURCE_GROUP }}
          imageToBuild: ${{ secrets.PEERPULSE_CONTAINER_REGISTRY }}.azurecr.io/peerpulse:${{ github.sha }}
  
  test-deployment:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.PEERPULSE_AZURE_CREDENTIALS }}
      
      - name: Get container name
        run: 
          # Install the container app extension for the azure cli
          az extension add --name containerapp --upgrade
          # Get the latest deployed revision name
          REVISION_NAME=`az containerapp revision list -n ${{ secrets.PEERPULSE_CONTAINER_APP_NAME }} -g ${{ secrets.PEERPULSE_RESOURCE_GROUP }} --query "[].name" -o tsv | tail -1`
          # Get the last deployed revision's fqdn
          REVISION_FQDN=`az containerapp revision show -n ${{ secrets.PEERPULSE_CONTAINER_APP_NAME }} -g ${{ secrets.PEERPULSE_RESOURCE_GROUP }} --revision "$REVISION_NAME" --query properties.fqdn -o tsv`
          # Store the value in an environment variable
          echo "REVISION_NAME=$REVISION_NAME" >> $GITHUB_ENV
          echo "REVISION_FQDN=$REVISION_FQDN" >> $GITHUB_ENV
      
      - name: Test the deployment
        id: test-deployment
        uses: jtalk/url-health-check-action@v3
        with:
          url: "https://${{ env.REVISION_FQDN }}/api/v1"
        
      - name: Print the result
        run: echo "The deployment is ${{ steps.test-deployment.outputs.status }}"
